class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k == 1) return head;

        // Dummy node to simplify head handling
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy, end = dummy;

        while (true) {
            // find the end of current k-group
            int count = 0;
            while (count < k && end != null) {
                end = end.next;
                count++;
            }
            if (end == null) break; // not enough nodes

            ListNode start = prev.next;
            ListNode nextGroup = end.next;
            end.next = null; // cut

            // reverse current group
            prev.next = reverse(start);

            // connect with next
            start.next = nextGroup;
            prev = start;
            end = prev;
        }
        return dummy.next;
    }

    // standard linked-list reverse
    private ListNode reverse(ListNode head) {
        ListNode prev = null, curr = head;
        while (curr != null) {
            ListNode nxt = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nxt;
        }
        return prev;
    }
}
