PriorityQueue<double[]> pq = new PriorityQueue<>((a, b) -> Double.compare(b[0], a[0]));

        // Initialize heap with each class's gain
        for (int[] c : classes) {
            int pass = c[0], total = c[1];
            double gain = gain(pass, total);
            pq.offer(new double[]{gain, pass, total});
        }

        // Assign extra students
        while (extraStudents-- > 0) {
            double[] top = pq.poll();
            int pass = (int) top[1] + 1;
            int total = (int) top[2] + 1;
            double gain = gain(pass, total);
            pq.offer(new double[]{gain, pass, total});
        }

        // Compute final average ratio
        double sum = 0.0;
        for (double[] c : pq) {
            sum += c[1] / c[2];
        }
        return sum / classes.length;
    }

    // Function to calculate marginal gain
    private double gain(int pass, int total) {
        return ((double) (pass + 1) / (total + 1)) - ((double) pass / total);
