import java.util.*;

public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(candidates);                // Sort to handle duplicates
        backtrack(result, new ArrayList<>(), candidates, target, 0);
        return result;
    }

    private void backtrack(List<List<Integer>> result,
                           List<Integer> temp,
                           int[] nums,
                           int remain,
                           int start) {
        if (remain == 0) {                      // Found a valid combination
            result.add(new ArrayList<>(temp));
            return;
        }
        for (int i = start; i < nums.length; i++) {
            if (i > start && nums[i] == nums[i - 1]) continue; // Skip duplicates
            if (nums[i] > remain) break;        // No need to proceed further

            temp.add(nums[i]);                  // Choose the number
            backtrack(result, temp, nums, remain - nums[i], i + 1); // Move next
            temp.remove(temp.size() - 1);       // Backtrack
        }
    }
}
