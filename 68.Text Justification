class Solution {
    public List<String> fullJustify(String[] words, int maxWidth) {
        List<String> result = new ArrayList<>();
        int i = 0;
        while (i < words.length) {
            int j = i, lineLength = 0;
            
            // Determine how many words fit in this line
            while (j < words.length && lineLength + words[j].length() + (j - i) <= maxWidth) {
                lineLength += words[j].length();
                j++;
            }
            
            // Number of words in the current line
            int gaps = j - i - 1;
            StringBuilder line = new StringBuilder();
            
            // If it's the last line or only one word in the line
            if (j == words.length || gaps == 0) {
                for (int k = i; k < j; k++) {
                    line.append(words[k]);
                    if (k != j - 1) line.append(" ");
                }
                // Fill remaining spaces
                while (line.length() < maxWidth)
                    line.append(" ");
            } else {
                // Calculate even space distribution
                int totalSpaces = maxWidth - lineLength;
                int spaceEach = totalSpaces / gaps;
                int extraSpaces = totalSpaces % gaps;
                
                for (int k = i; k < j - 1; k++) {
                    line.append(words[k]);
                    for (int s = 0; s < spaceEach + (k - i < extraSpaces ? 1 : 0); s++) {
                        line.append(" ");
                    }
                }
                line.append(words[j - 1]); // last word
            }
            
            result.add(line.toString());
            i = j; // move to next line
        }
        return result;
    }
}
